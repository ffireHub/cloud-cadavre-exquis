---
- name: Prepare hosts
  hosts: all
  become: true
  gather_facts: false
  tasks:
    - name: Wait for hosts to be ready
      ansible.builtin.wait_for_connection:
        delay: 10
        timeout: 300

    - name: Disable swap
      ansible.builtin.command: sudo swapoff -a
      # ignore_errors: true
    - name: Disable swap permanently
      ansible.builtin.lineinfile:
        dest: /etc/fstab
        regexp: '^/swapfile'
        state: absent

    - name: Ensure the directory data exists with 777 permissions
      ansible.builtin.file:
        path: /mnt/data
        state: directory
        mode: '0777'
    - name: Ensure the directory primary exists with 777 permissions
      ansible.builtin.file:
        path: /mnt/data/primary
        state: directory
        mode: '0777'
    - name: Ensure the directory read exists with 777 permissions
      ansible.builtin.file:
        path: /mnt/data/read
        state: directory
        mode: '0777'

    - name: Ensure the overlay and br_netfilter modules are loaded at boot
      ansible.builtin.copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/containerd.conf
        owner: root
        group: root
        mode: '0644'

    - name: Load modules
      community.general.modprobe:
        name: '{{ item }}'
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Ensure sysctl params are set
      ansible.posix.sysctl:
        name: '{{ item }}'
        value: '1'
        state: present
        sysctl_set: true
        reload: true
      loop:
        - net.bridge.bridge-nf-call-iptables
        - net.ipv4.ip_forward
        - net.bridge.bridge-nf-call-ip6tables

    - name: Install packages
      ansible.builtin.apt:
        name: 'containerd'
        state: present
        update_cache: true

    - name: Générer la configuration containerd par défaut
      ansible.builtin.shell:
        cmd: containerd config default
      register: containerd_config
      changed_when: false

    - name: Créer le fichier de configuration containerd
      ansible.builtin.copy:
        content: '{{ containerd_config.stdout }}'
        dest: /etc/containerd/config.toml
        owner: root
        group: root
        mode: '0644'

    - name: Set SystemdCgroup to true
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Restart and enable containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted
        enabled: true

    - name: Ensure /etc/apt/keyrings directory exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download and add the Kubernetes signing key
      ansible.builtin.get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
        mode: '0644'

    - name: Add the Kubernetes apt repository
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /
        filename: kubernetes.list
        state: present

    - name: Ensure Python 3 and pip are installed
      ansible.builtin.apt:
        name: 
          - python3
          - python3-pip
        state: present
        update_cache: true

    - name: Ensure pipx is installed
      ansible.builtin.apt:
        name: pipx
        state: present

    - name: Initialize pipx to ensure its environment is ready
      ansible.builtin.command: pipx ensurepath

    - name: Install virtualenv using pipx
      ansible.builtin.command: pipx install virtualenv

    - name: Create a virtual environment for Kubernetes Python client
      ansible.builtin.shell:
        cmd: python3 -m venv ~/k8s-venv

    - name: Activate the virtual environment and install Kubernetes Python client
      ansible.builtin.shell:
        cmd: ~/k8s-venv/bin/pip install kubernetes

    - name: Use virtual environment for Kubernetes tasks
      ansible.builtin.set_fact:
        ansible_python_interpreter: "~/k8s-venv/bin/python"

    - name: Add Helm signing key
      ansible.builtin.get_url:
        url: https://baltocdn.com/helm/signing.asc
        dest: /usr/share/keyrings/helm.asc
        mode: '0644'

    - name: Add Helm apt repository
      ansible.builtin.apt_repository:
        repo: 'deb [signed-by=/usr/share/keyrings/helm.asc] https://baltocdn.com/helm/stable/debian/ all main'
        filename: helm-stable-debian.list
        state: present

    - name: Install packages
      ansible.builtin.apt:
        name: '{{ item }}'
        state: present
        update_cache: true
      loop:
        - kubelet
        - kubeadm
        - kubectl
        - helm

    - name: Hold packages
      ansible.builtin.dpkg_selections:
        name: '{{ item }}'
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

- name: Initialize cluster
  hosts: controller
  become: true
  tasks:
    - name: Wait for controller to be ready
      ansible.builtin.wait_for_connection:
        delay: 10
        timeout: 300

    - name: Create kubeadm config file
      ansible.builtin.copy:
        dest: /root/kubeadm-config.yaml
        content: |
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: InitConfiguration
          ---
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: ClusterConfiguration
          kubernetesVersion: "1.28.0"
          ---
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
        owner: root
        group: root
        mode: '0644'

    - name: Initialize the cluster
      ansible.builtin.shell:
        cmd: kubeadm init --config /root/kubeadm-config.yaml
      register: kubeadm_init
      changed_when: false

    - name: Create .kube for user's
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: '0755'

    - name: Copy kubeconfig to user's home directory
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ ansible_user }}/.kube/config
        remote_src: true
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: '0644'

    - name: Copy pvc1.yml to remote
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/pvc1.yml"
        dest: "/tmp/pvc1.yml"

    - name: Apply the pvc1
      kubernetes.core.k8s:
        state: present
        src: "/tmp/pvc1.yml"
        kubeconfig: "/etc/kubernetes/admin.conf"

    - name: Copy pvc2.yml to remote
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/pvc2.yml"
        dest: "/tmp/pvc2.yml"

    - name: Apply the pvc2
      kubernetes.core.k8s:
        state: present
        src: "/tmp/pvc2.yml"
        kubeconfig: "/etc/kubernetes/admin.conf"

    - name: Fetch kubeconfig for local usage
      ansible.builtin.fetch:
        src: /etc/kubernetes/admin.conf
        dest: ./kube.conf
        flat: true

    - name: Install Calico
      ansible.builtin.shell:
        cmd: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: calico_install
      changed_when: false

    - name: Install ingress controller traefik
      kubernetes.core.helm:
        release_name: traefik
        chart_ref: traefik
        chart_repo_url: https://helm.traefik.io/traefik
        release_namespace: traefik-ingress
        create_namespace: true
        values:
          globalArguments:
          deployment:
            kind: DaemonSet
          providers:
            kubernetesCRD:
              enabled: true
          service:
            type: LoadBalancer
            spec:
              loadBalancerIP: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
              externalIPs:
                - "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
          ingressRoute:
            dashboard:
              enabled: false
        kubeconfig: /etc/kubernetes/admin.conf

    - name: Get join command
      ansible.builtin.command: kubeadm token create --print-join-command
      register: join_command
      changed_when: false

    - name: Set join command
      ansible.builtin.add_host:
        name: 'join_command'
        commande: '{{ join_command.stdout }}'

- name: Setup kubernetes Worker nodes
  hosts: workers
  become: true
  gather_facts: false
  tasks:
    - name: Wait for workers's to be ready
      ansible.builtin.wait_for_connection:
        delay: 10
        timeout: 300

    - name: Join the cluster
      ansible.builtin.shell: "{{ hostvars['join_command']['commande'] }}"
      changed_when: false

- name: Add monitoring
  hosts: controller
  become: true
  gather_facts: false
  tasks:
    - name: Install prometheus monitoring
      kubernetes.core.helm:
        release_name: prometheus
        chart_ref: kube-prometheus-stack
        chart_repo_url: https://prometheus-community.github.io/helm-charts
        release_namespace: prometheus
        create_namespace: true
        values:
          prometheus:
            service:
              type: LoadBalancer
          grafana:
            service:
              type: LoadBalancer
        kubeconfig: "/etc/kubernetes/admin.conf"
        
    - name: Install cadavre-exquis-release
      kubernetes.core.helm:
        release_name: cadavre-exquis-release
        chart_ref: fteychene-cadavre-exquis
        chart_repo_url: https://ffireHub.github.io/cloud-cadavre-exquis/helm/
        release_namespace: cloud
        create_namespace: true
        kubeconfig: "/etc/kubernetes/admin.conf"
        values:
          dispatcher:
            domain: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"